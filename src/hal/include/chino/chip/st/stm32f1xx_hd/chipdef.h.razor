// MIT License
//
// Copyright (c) 2020 SunnyCase
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#pragma once
#include <cstdint>
#include <cstddef>

@model Chino.TemplateRenderContext
@using Chino
@using Chino.Chip
@using System.Linq
@{
    var soc = (SimpleBusNode)Model.Chip.Root.Devices[0];
}
namespace chino::chip::config
{
/* Forward Declares */
@foreach (SimpleDeviceNode dev in soc.Children)
{
@:struct @dev.Name.ToLower();
}

/* Pin Banks */
@foreach (PinBank bank in Model.Chip.PinBanks)
{
@:struct @bank.Name.ToLower()
@:{
@:    using dev_t = @bank.Device.Name.ToLower();
@:    static constexpr uint32_t pins_count = @bank.PinsCount;
@:};
}

/* Device Coinfigurations */
@foreach (SimpleDeviceNode dev in soc.Children)
{
@:struct @dev.Name.ToLower()
@:{
@:    static constexpr uintptr_t base = @("0x" + dev.Regs[0].Start.ToString("X8"));
    if (dev.PinGroups.Any())
    {
@:
@:    struct pins
@:    {
        var pinGroupName = Model.Board.SelectedPinGroups[dev.Name];
        var pinGroup = dev.PinGroups.First(x => x.Name == pinGroupName);
        foreach (var pin in pinGroup.Pins)
        {
@:        struct @pin.Name.ToLower()
@:        {
@:            using bank_t = @pin.Pin.Bank.Name.ToLower();
@:            static constexpr uint32_t index = @pin.Pin.Index;
@:        };
@:
        }
@:    };
    }
@:};
@:
}
}
